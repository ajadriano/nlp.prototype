<?xml version="1.0" encoding="UTF-8"?>
<tests>
	<test>
		<input>A driver is any person that drives a vehicle.</input>
		<output>EquivalentClasses(Class(Driver driver) ObjectIntersectionOf(Class(Person person) ObjectSomeValuesFrom(ObjectProperty(drive drives) Class(Vehicle vehicle))))</output>
	</test>
	<test>
		<input>All buses are vehicles.</input>
		<output>SubClassOf(Class(Bus buses) Class(Vehicle vehicles))</output>
	</test>
	<test>
		<input>A bus driver is any person that drives a bus.</input>
		<output>EquivalentClasses(Class(BusDriver bus driver) ObjectIntersectionOf(Class(Person person) ObjectSomeValuesFrom(ObjectProperty(drive drives) Class(Bus bus))))</output>
	</test>
	<test>
		<input>Drivers are adults.</input>
		<output>SubClassOf(Class(Driver Drivers) Class(Adult adults))</output>
	</test>
	<test>
		<input>A grown-up is any person that is an adult.</input>
		<output>EquivalentClasses(Class(Grown-up grown-up) ObjectIntersectionOf(Class(Person person) Class(Adult adult)))</output>
	</test>
	<test>
		<input>Nothing can be both a boy and a girl.</input>
		<output>DisjointClasses(Class(Boy boy) Class(Girl girl))</output>
	</test>
	<test>
		<input>Leia Organa is a lady.</input>
		<output>ClassAssertion(Class(Lady lady) Individual(LeiaOrgana Leia Organa))</output>
	</test>
	<test>
		<input>Han Solo likes Leia Organa.</input>
		<output>ObjectPropertyAssertion(ObjectProperty(like likes) Individual(HanSolo Han Solo) Individual(LeiaOrgana Leia Organa))</output>
	</test>
	<test>
		<input>Han likes Leia.</input>
		<output>ObjectPropertyAssertion(ObjectProperty(like likes) Individual(Han Han) Individual(Leia Leia))</output>
	</test>
	<test>
		<input>Han likes Leia Organa.</input>
		<output>ObjectPropertyAssertion(ObjectProperty(like likes) Individual(Han Han) Individual(LeiaOrgana Leia Organa))</output>
	</test>
	<test>
		<input>Han Solo likes Leia.</input>
		<output>ObjectPropertyAssertion(ObjectProperty(like likes) Individual(HanSolo Han Solo) Individual(Leia Leia))</output>
	</test>
	<test>
		<input>Who does Luke Skywalker like?</input>
		<output>GetObjectPropertyValues(Individual(LukeSkywalker) ObjectProperty(like))</output>
	</test>
	<test>
		<input>Who likes Leia?</input>
		<output>GetInstances(ObjectHasValue(ObjectProperty(like) Individual(Leia)))</output>
	</test>
	<test>
		<input>Katniss Everdeen is a person who likes cats.</input>
		<output>ClassAssertion(ObjectIntersectionOf(Class(Person person) ObjectSomeValuesFrom(ObjectProperty(like likes) Class(Cat cats))) Individual(KatnissEverdeen Katniss Everdeen))</output>
	</test>
	<test>
		<input>Katniss is a person who likes cats.</input>
		<output>ClassAssertion(ObjectIntersectionOf(Class(Person person) ObjectSomeValuesFrom(ObjectProperty(like likes) Class(Cat cats))) Individual(Katniss Katniss))</output>
	</test>
	<test>
		<input>AJ likes dogs.</input>
		<output>SubClassOf(Class(Dog dogs) ObjectHasValue(ObjectInverseOf(ObjectProperty(like likes)) Individual(AJ AJ)))</output>
	</test>
	<test>
		<input>Adrian Joseph likes dogs.</input>
		<output>SubClassOf(Class(Dog dogs) ObjectHasValue(ObjectInverseOf(ObjectProperty(like likes)) Individual(AdrianJoseph Adrian Joseph)))</output>
	</test>
	<test>
		<input>AJ likes fried chicken.</input>
		<output>SubClassOf(Class(FriedChicken fried chicken) ObjectHasValue(ObjectInverseOf(ObjectProperty(like likes)) Individual(AJ AJ)))</output>
	</test>
	<test>
		<input>Adrian Joseph likes fried chicken.</input>
		<output>SubClassOf(Class(FriedChicken fried chicken) ObjectHasValue(ObjectInverseOf(ObjectProperty(like likes)) Individual(AdrianJoseph Adrian Joseph)))</output>
	</test>
	<test>
		<input>Darth Vader is the father of Luke Skywalker.</input>
		<output>ObjectPropertyAssertion(Class(hasFather has father) Individual(LukeSkywalker Luke Skywalker) Individual(DarthVader Darth Vader))</output>
	</test>
	<test>
		<input>Darth Vader is the father of Luke.</input>
		<output>ObjectPropertyAssertion(Class(hasFather has father) Individual(Luke Luke) Individual(DarthVader Darth Vader))</output>
	</test>
	<test>
		<input>Darth is the father of Luke Skywalker.</input>
		<output>ObjectPropertyAssertion(Class(hasFather has father) Individual(LukeSkywalker Luke Skywalker) Individual(Darth Darth))</output>
	</test>
	<test>
		<input>Darth is the father of Luke.</input>
		<output>ObjectPropertyAssertion(Class(hasFather has father) Individual(Luke Luke) Individual(Darth Darth))</output>
	</test>
	<test>
		<input>Fried chicken is a chicken dish.</input>
		<output>SubClassOf(Class(FriedChicken Fried chicken) Class(ChickenDish chicken dish))</output>
	</test>
	<test>
		<input>Who does AJ like?</input>
		<output>GetObjectPropertyValues(Individual(AJ) ObjectProperty(like))</output>
	</test>
</tests>