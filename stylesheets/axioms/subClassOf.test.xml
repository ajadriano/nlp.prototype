<?xml version="1.0" encoding="UTF-8"?>
<tests>
	<test>
		<input>A Sith Lord is a person.</input>
		<output>SubClassOf(Class(SithLord Sith Lord) Class(Person person))</output>
	</test>
	<test>
		<input>All buses are vehicles.</input>
		<output>SubClassOf(Class(Bus buses) Class(Vehicle vehicles))</output>
	</test>
	<test>
		<input>Drivers are adults.</input>
		<output>SubClassOf(Class(Driver Drivers) Class(Adult adults))</output>
	</test>
	<test>
		<input>Fried chicken is a chicken dish.</input>
		<output>SubClassOf(Class(FriedChicken Fried chicken) Class(ChickenDish chicken dish))</output>
	</test>
        <test>
		<input>Each person can be a wizard.</input>
		<output>SubClassOf(Class(Person person) Class(Wizard wizard))</output>
	</test>
        <test>
		<input>A person cannot be a wizard.</input>
		<output>SubClassOf(Class(Person person) ObjectComplementOf(Class(Wizard wizard)))</output>
	</test>
        <test>
		<input>Each person can be a wizard, a muggle or a squib.</input>
		<output>SubClassOf(Class(Person person) ObjectUnionOf(Class(Wizard wizard) Class(Muggle muggle) Class(Squib squib)))</output>
	</test>
        <test>
		<input>Wizards, knights and muggles are persons.</input>
		<output>SubClassOf(Class(Wizard Wizards) Class(Person persons))</output>
                <output>SubClassOf(Class(Knight knights) Class(Person persons))</output>
                <output>SubClassOf(Class(Muggle muggles) Class(Person persons))</output>
	</test>
        <test>
		<input>Wizards and muggles are persons; but no one can be a wizard and a muggle.</input>
		<output>SubClassOf(Class(Wizard Wizards) Class(Person persons))</output>
                <output>SubClassOf(Class(Muggle muggles) Class(Person persons))</output>
                <output>DisjointClasses(Class(Wizard wizard) Class(Muggle muggle))</output>
	</test>
        <test>
		<input>Children are either wizards or squibs.</input>
		<output>SubClassOf(Class(Child Children) ObjectUnionOf(Class(Wizard wizards) Class(Squib squibs)))</output>
	</test>
        <test>
		<input>A child is either a wizard or a squib.</input>
		<output>SubClassOf(Class(Child child) ObjectUnionOf(Class(Wizard wizard) Class(Squib squib)))</output>
	</test>
        <test>
		<input>Wizard's children are either wizards or squibs.</input>
		<output>SubClassOf(ObjectSomeValuesFrom(ObjectProperty(childOf child of) Class(Wizard Wizard)) ObjectUnionOf(Class(Wizard wizards) Class(Squib squibs)))</output>
	</test>
        <test>
		<input>Wizard's children are squibs.</input>
		<output>SubClassOf(ObjectSomeValuesFrom(ObjectProperty(childOf child of) Class(Wizard Wizard)) Class(Squib squibs))</output>
	</test>
        <test>
		<input>A wizard's child is a squib.</input>
		<output>SubClassOf(ObjectSomeValuesFrom(ObjectProperty(childOf child of) Class(Wizard wizard)) Class(Squib squib))</output>
	</test>
        <test>
		<input>A child of a wizard is a squib.</input>
		<output>SubClassOf(ObjectSomeValuesFrom(ObjectProperty(childOf child of) Class(Wizard wizard)) Class(Squib squib))</output>
	</test>
        <test>
		<input>The child of a wizard is a squib.</input>
		<output>SubClassOf(ObjectSomeValuesFrom(ObjectProperty(childOf child of) Class(Wizard wizard)) Class(Squib squib))</output>
	</test>
        <test>
		<input>Everybody that has a wand is a wizard.</input>
		<output>SubClassOf(ObjectIntersectionOf(Thing() ObjectSomeValuesFrom(ObjectPropertyWithInverse(haveWand wandOf have wand) Thing())) Class(Wizard wizard))</output>
	</test>
        <test>
		<input>A wizard has a wand.</input>
		<output>SubClassOf(Class(Wizard wizard) ObjectSomeValuesFrom(ObjectPropertyWithInverse(haveWand wandOf have wand) Thing()))</output>
	</test>
        <test>
		<input>A wizard has three wands.</input>
		<output>SubClassOf(Class(Wizard wizard) ObjectExactCardinality(3.0 ObjectPropertyWithInverse(haveWand wandOf have wands)))</output>
	</test>
        <test>
		<input>A wizard has exactly three wands.</input>
		<output>SubClassOf(Class(Wizard wizard) ObjectExactCardinality(3.0 ObjectPropertyWithInverse(haveWand wandOf have wands)))</output>
	</test>
        <test>
		<input>A wizard has at least three wands.</input>
		<output>SubClassOf(Class(Wizard wizard) ObjectMinCardinality(&gt;=3.0 ObjectPropertyWithInverse(haveWand wandOf have wands)))</output>
	</test>
        <test>
		<input>A wizard has at most four wands.</input>
		<output>SubClassOf(Class(Wizard wizard) ObjectMaxCardinality(&lt;4.0 ObjectPropertyWithInverse(haveWand wandOf have wands)))</output>
	</test>
        <test>
		<input>Cows are animals that eat grass.</input>
		<output>SubClassOf(Class(Cow Cows) ObjectIntersectionOf(Class(Animal animals) ObjectSomeValuesFrom(ObjectProperty(eat eat) Class(Grass grass))))</output>
	</test>
        <test>
		<input>Cows are animals that eat only grass.</input>
		<output>SubClassOf(Class(Cow Cows) ObjectIntersectionOf(Class(Animal animals) ObjectAllValuesFrom(ObjectProperty(eat eat) Class(Grass grass))))</output>
	</test>
        <test>
		<input>Poets write poems.</input>
		<output>SubClassOf(Class(Poet Poets) ObjectSomeValuesFrom(ObjectProperty(write write) Class(Poem poems)))</output>
	</test>
        <test>
		<input>Cows eat grass.</input>
		<output>SubClassOf(Class(Cow Cows) ObjectSomeValuesFrom(ObjectProperty(eat eat) Class(Grass grass)))</output>
	</test>
        <test>
		<input>A cow eats only grass.</input>
		<output>SubClassOf(Class(Cow cow) ObjectAllValuesFrom(ObjectProperty(eat eats) Class(Grass grass)))</output>
	</test>
        <test>
		<input>A cow only eats grass.</input>
		<output>SubClassOf(Class(Cow cow) ObjectAllValuesFrom(ObjectProperty(eat eats) Class(Grass grass)))</output>
	</test>
        <test>
		<input>Smugglers are wealthy.</input>
		<output>SubClassOf(Class(Smuggler Smugglers) DataHasBoolValue(DataProperty(isWealthy XSD_BOOLEAN is wealthy) true))</output>
	</test>
        <test>
		<input>Smugglers are not wealthy.</input>
		<output>SubClassOf(Class(Smuggler Smugglers) DataHasBoolValue(DataProperty(isWealthy XSD_BOOLEAN is wealthy) false))</output>
	</test>
        <!--<test>
		<input>Leia Organa is the princess of Alderaan. She likes to play the piano.</input>
		<output>ObjectPropertyAssertion(ObjectPropertyWithInverse(princessOf havePrincess princess of) NamedIndividual(LeiaOrgana Leia Organa) NamedIndividual(Alderaan Alderaan))</output>
                <output>SubClassOf(Class(Piano piano) ObjectHasValue(ObjectInverseOf(ObjectProperty(likeToplay likes to play)) NamedIndividual(LeiaOrgana Leia Organa)))</output>
	</test>-->
</tests>
